<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>



<pre>
A pseudo-class is used to define a special state of an element.
For example, it can be used to:
Style an element when a user mouses over it
Style visited and unvisited links differently
Style an element when it gets focus

  /* unvisited link */
  a:link {color: red;}

  /* visited link */
  a:visited {color: green;}

  /* mouse over link */
  a:hover {color: hotpink;}

  /* selected link */
  a:active {color: blue;}

<b>Note:</b> a:hover MUST come after a:link and a:visited in the CSS definition in order to be effective.
<b>Note:</b> a:active MUST come after a:hover in the CSS definition in order to be effective.

Pseudo-classes can be combined with CSS classes:
a.highlight:hover {color: #ff0000;} 
...
a class="highlight" href="css_syntax.asp"

An example of using the :hover pseudo-class on a &lt;div&gt; element:
div {
    background-color: green;
    color: white;
    padding: 25px;
    text-align: center;}
div:hover {background-color: blue;}
</pre>

<p><b>:first-child</b> pseudo-class matches a specified element that is the first child of another element.
<br>In the following example, the selector matches any element that is the first child of any element:
<br>p:first-child {color: blue;}<p>

<style>p:first-child {color: blue;}</style>
<div>
<p>This is some text. It is the first child of the Div.</p>
<p>This is some text.</p>
<p><b>Note:</b> For :first-child to work in IE8 and earlier, a DOCTYPE must be declared.</p>
</div>

Match the first &lt;i> element in all &lt;p> elements
p i:first-child {color: blue;}

Match all &lt;i> elements in all first child &lt;p> elements
In the following example, the selector matches all &lt;i> elements in &lt;p> elements that are the first child of another element:
p:first-child i {color: blue;}

<pre>
<b>All CSS Pseudo Classes</b>
:active	a:active	Selects the active link
:checked	input:checked	Selects every checked &lt;input> element
:disabled	input:disabled	Selects every disabled &lt;input> element
:empty	p:empty	Selects every &lt;p> element that has no children
:enabled	input:enabled	Selects every enabled &lt;input> element
:first-child	p:first-child	Selects every &lt;p> elements that is the first child of its parent
:first-of-type	p:first-of-type	Selects every &lt;p> element that is the first &lt;p> element of its parent
:focus	input:focus	Selects the &lt;input> element that has focus
:hover	a:hover	Selects links on mouse over
:in-range	input:in-range	Selects &lt;input> elements with a value within a specified range
:invalid	input:invalid	Selects all &lt;input> elements with an invalid value
:lang(language)	p:lang(it)	Selects every &lt;p> element with a lang attribute value starting with "it"
:last-child	p:last-child	Selects every &lt;p> elements that is the last child of its parent
:last-of-type	p:last-of-type	Selects every &lt;p> element that is the last &lt;p> element of its parent
:link	a:link	Selects all unvisited links
:not(selector)	:not(p)	Selects every element that is not a &lt;p> element
:nth-child(n)	p:nth-child(2)	Selects every &lt;p> element that is the second child of its parent
:nth-last-child(n)	p:nth-last-child(2)	Selects every &lt;p> element that is the second child of its parent, counting from the last child
:nth-last-of-type(n)	p:nth-last-of-type(2)	Selects every &lt;p> element that is the second &lt;p> element of its parent, counting from the last child
:nth-of-type(n)	p:nth-of-type(2)	Selects every &lt;p> element that is the second &lt;p> element of its parent
:only-of-type	p:only-of-type	Selects every &lt;p> element that is the only &lt;p> element of its parent
:only-child	p:only-child	Selects every &lt;p> element that is the only child of its parent
:optional	input:optional	Selects &lt;input> elements with no "required" attribute
:out-of-range	input:out-of-range	Selects &lt;input> elements with a value outside a specified range
:read-only	input:read-only	Selects &lt;input> elements with a "readonly" attribute specified
:read-write	input:read-write	Selects &lt;input> elements with no "readonly" attribute
:required	input:required	Selects &lt;input> elements with a "required" attribute specified
:root	root	Selects the document's root element
:target	#news:target	Selects the current active #news element (clicked on a URL containing that anchor name)
:valid	input:valid	Selects all &lt;input> elements with a valid value
:visited	a:visited	Selects all visited links
<hr>
<b>All CSS Pseudo Elements</b>
::after	p::after	Insert content after every &lt;p> element
::before	p::before	Insert content before every &lt;p> element
::first-letter	p::first-letter	Selects the first letter of every &lt;p> element
::first-line	p::first-line	Selects the first line of every &lt;p> element
::selection	p::selection	Selects the portion of an element that is selected by a user

A CSS pseudo-element is used to style specified parts of an element. selector::pseudo-element {property:value;}

For example, it can be used to:
Style the first letter, or line, of an element
Insert content before, or after, the content of an element

<i>The double colon replaced the single-colon notation for pseudo-elements in CSS3. This was an attempt from W3C to distinguish between pseudo-classes and pseudo-elements. The single-colon syntax was used for both pseudo-classes and pseudo-elements in CSS2 and CSS1.</i>

::first-line pseudo-element is used to add a special style to the first line of a text.
The following example formats the first line of the text in all <p> elements:
p::first-line {
    color: #ff0000;
    font-variant: small-caps;}

<b>Note: The ::first-line pseudo-element can only be applied to block-level elements.</b>

The following properties apply to the ::first-line pseudo-element:
font properties
color properties
background properties
word-spacing
letter-spacing
text-decoration
vertical-align
text-transform
line-height
clear

::first-letter pseudo-element is used to add a special style to the first letter of a text.
The following example formats the first letter of the text in all &lt;p> elements: 
p::first-letter {
    color: #ff0000;
    font-size: xx-large;}

<b>Note: The ::first-letter pseudo-element can only be applied to block-level elements.</b>

The following properties apply to the ::first-letter pseudo- element: 
font properties
color properties 
background properties
margin properties
padding properties
border properties
text-decoration
vertical-align (only if "float" is "none")
text-transform
line-height
float
clear

Pseudo-elements can be combined with CSS classes: 
display the first letter of paragraphs with class="intro", in red and in a larger size:
p.intro::first-letter {
    color: #ff0000;
    font-size:200%;}

::before pseudo-element can be used to insert some content before the content of an element.
The following example inserts an image before the content of each &lt;h1> element:
h1::before {content: url(smiley.gif);}

::after pseudo-element can be used to insert some content after the content of an element.
The following example inserts an image after the content of each &lt;h1> element:
h1::after {content: url(smiley.gif);}

::selection pseudo-element matches the portion of an element that is selected by a user.
The following CSS properties can be applied to ::selection: <b>color, background, cursor, and outline.</b>
The following example makes the selected text red on a yellow background:
::selection {color: red; background: yellow;}
</pre>

</body>
</html>
